// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  CLIENT
}

enum PaymentStatus {
  PENDING
  SUCCESSFULL
  FAILED
}

enum BookingStatus {
  PENDING
  SUCCESSFULL
  CANCELED
}

enum CleaningStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum AssignedStatus {
  UNASSIGNED
  ASSIGNED
}

model Booking {
  id               Int            @id @default(autoincrement())
  postcode         String         @db.VarChar(50)
  rooms            String         @db.VarChar(20)
  bathrooms        String         @db.VarChar(20)
  clean_type       String         @db.VarChar(50)
  hours            String         @db.VarChar(10)
  cleaning_product String         @db.VarChar(50)
  frequency        String         @db.VarChar(50)
  access_type      String         @db.VarChar(50)
  house_access     String         @db.VarChar(50)
  pets             String         @db.VarChar(30)
  pet_type         String?
  notes            String?        @db.Text
  booking_date     String         @db.VarChar(20)
  booking_time     String         @db.VarChar(20)
  fullname         String         @db.VarChar(100)
  phone_number     String         @db.VarChar(20)
  email            String         @db.VarChar(50)
  address          String         @db.VarChar(255)
  city             String         @db.VarChar(50)
  amount           Int            @default(100)
  payment_status   PaymentStatus  @default(PENDING)
  booking_status   BookingStatus  @default(PENDING)
  cleaning_status  CleaningStatus @default(PENDING)
  assigned_status  AssignedStatus @default(UNASSIGNED)
  assignedToUserId String?        @db.VarChar(255)
  assignedToUser   User?          @relation(fields: [assignedToUserId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  // extra_task       String?        @db.VarChar(250)
}



model Account {
  id                String  @id @default(cuid())
 userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String    @db.VarChar(255)
  emailVerified DateTime?
  name          String    @db.VarChar(100)
  phone_number  String?    @db.VarChar(20)
  address       String?    @db.VarChar(255)
  city          String?   @db.VarChar(50)
  image         String?

  assignedTasks Booking[]
  role          UserRole @default(CLIENT) 
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}